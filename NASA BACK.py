# -*- coding: utf-8 -*-
"""Nasa projects 0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14IA3uNgmIOoD5kEsCgEil8UXKfClx-oL

**ðŸš€ NASA Near-Earth Object (NEO) Tracking & Insights using Public API**

**Step:1** using API key to connect with the NASA public insights

**Step:2** Key for connectio{API_KEY="M0oV1ghvmKnMqhS6c5ynHBzffBewcNx16KLNocYo"}
'''An API key is like a password that allows your Python (or any other) program to access some web service or data source â€” such as NASAâ€™s API, OpenWeather, Google Maps, etc.

When you connect to an API, you usually send a request like this'''

import requests # import requests HTTP  library to get data from API

**Step:3** url=f"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-07&api_key={API_KEY}"  which gives you asteroid data for a specific date range.

response = requests.get(url) # response is a object = url link

**Step:5** response # response 200 means the API and url link workign fine and (403 means work)**bold text**

**Step:1 Using API key to NASA URL websites and check URL response **200** bold text**
"""

API_KEY="M0oV1ghvmKnMqhS6c5ynHBzffBewcNx16KLNocYo"

import requests # Import requests HTTP library to get data from API

url=f"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-07&api_key={API_KEY}" #date specified

response =requests. get(url) # response  is a object = url link

response # response 200 means working fine (404 means wrong)

"""**Step:2** ***The response of the file converting into Json format**"""

data = response.json() # here we are converting http response into json format
data # data
""" Links,Id,neo_reference and all are coming as a dictorary but close_approach date list inside dictorary is there  so we can call using"""

print(data.keys())
"only 3 dictionary keys available"

data["links"] #While calling links we should use "Key"

data["element_count"]# 110 element count available here

print(data["near_earth_objects"].keys()) #inthat 7 day dictionary data available

data["near_earth_objects"]['2024-01-02']#for single data asteroid data not required just for reference

data['near_earth_objects']['2024-01-02'][0]['id']#(dictonaries ["2024-01-02"] and list means index[0]) #not required just for practice

"""**Step:3 For using loop to connect exact all the data's from the API key**

# **Stage 2** Collection of 10000 asterois data
"""

import requests
import json
from datetime import datetime
import mysql.connector

API_KEY = "M0oV1ghvmKnMqhS6c5ynHBzffBewcNx16KLNocYo"  # Replace with your actual key
target = 100
asteroids_data = []

# Starting URL
url = f"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-07&api_key={API_KEY}"

while len(asteroids_data) < target:
    response = requests.get(url)
    if response.status_code != 200:
        print(f"Error: {response.status_code}")
        break
    data = response.json()

    neo_dates = data.get('near_earth_objects', {})

    for date, ast_list in neo_dates.items():
        for ast in ast_list:
            for approach in ast.get('close_approach_data', []):
                # Extract and clean data
                try:
                    asteroids_data.append({
                        'id': int(ast['id']),
                        'name': ast.get('name', 'Unknown'),
                        'magnitude': float(ast.get('absolute_magnitude_h', 0)),
                        'dia_min': float(ast['estimated_diameter']['kilometers']['estimated_diameter_min']),
                        'dia_max': float(ast['estimated_diameter']['kilometers']['estimated_diameter_max']),
                        'hazardous': ast.get('is_potentially_hazardous_asteroid', False),
                        'closest_approach_date': approach.get('close_approach_date', ''),
                        'velocity_kmph': float(approach['relative_velocity']['kilometers_per_hour']),
                        'astronomical': float(approach['miss_distance']['astronomical']),
                        'miss_distance_km': float(approach['miss_distance']['kilometers']),
                        'miss_distance_lunar': float(approach['miss_distance']['lunar']),
                        'orbiting_body': approach.get('orbiting_body', 'Earth')
                    })
                except (KeyError, ValueError) as e:
                    print(f"Skipping record due to error: {e}")
                    continue

                if len(asteroids_data) >= target:
                    break
            if len(asteroids_data) >= target:
                break
        if len(asteroids_data) >= target:
            break

    # Go to the next page
    if 'next' in data.get('links', {}):
        url = data['links']['next']
    else:
        break

print(f"âœ… Total asteroids collected: {len(asteroids_data)}")

# Database connection
conn = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    user="34EjyZiSa86ATwm.root",
    password="rliXje9olqc9Q1Re",
    port=4000,
    database="nasa_neo_tracking"
)
cursor = conn.cursor()

# Create tables
cursor.execute("""
CREATE TABLE IF NOT EXISTS asteroids (
    id INT,
    name VARCHAR(255),
    absolute_magnitude_h FLOAT,
    estimated_diameter_min_km FLOAT,
    estimated_diameter_max_km FLOAT,
    is_potentially_hazardous_asteroid BOOLEAN
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS close_approach (
    neo_reference_id INT,
    close_approach_date DATE,
    relative_velocity_kmph FLOAT,
    astronomical FLOAT,
    miss_distance_km FLOAT,
    miss_distance_lunar FLOAT,
    orbiting_body VARCHAR(255)
)
""")

# Insert data
for asteroid in asteroids_data:
    cursor.execute("""
    INSERT INTO asteroids (id, name, absolute_magnitude_h, estimated_diameter_min_km, estimated_diameter_max_km, is_potentially_hazardous_asteroid)
    VALUES (%s, %s, %s, %s, %s, %s)
    """, (
        asteroid['id'],
        asteroid['name'],
        asteroid['magnitude'],
        asteroid['dia_min'],
        asteroid['dia_max'],
        asteroid['hazardous']
    ))

    cursor.execute("""
    INSERT INTO close_approach (neo_reference_id, close_approach_date, relative_velocity_kmph, astronomical, miss_distance_km, miss_distance_lunar, orbiting_body)
    VALUES (%s, %s, %s, %s, %s, %s, %s)
    """, (
        asteroid['id'],
        datetime.strptime(asteroid['closest_approach_date'], '%Y-%m-%d').date(),
        asteroid['velocity_kmph'],
        asteroid['astronomical'],
        asteroid['miss_distance_km'],
        asteroid['miss_distance_lunar'],
        asteroid['orbiting_body']
    ))

conn.commit()
cursor.close()
conn.close()

print("Data insertion completed.")


